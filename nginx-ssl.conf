events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Add WebAssembly MIME type if not present
    types {
        application/wasm wasm;
    }

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        application/wasm
        image/svg+xml;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;

    # HTTP server (redirects to HTTPS)
    server {
        listen 80;
        server_name gofred.io;

        # For Let's Encrypt certificate validation
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Redirect all HTTP traffic to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # HTTPS server
    server {
        listen 443 ssl http2;
        server_name gofred.io;
        root /usr/share/nginx/html;
        index index.html;

        # SSL configuration
        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout 10m;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers on;

        # Security headers for HTTPS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Main location block for static files
        location / {
            limit_req zone=general burst=20 nodelay;
            
            # Try to serve request as file, then as directory, then fall back to index.html
            try_files $uri $uri/ /index.html;
            
            # Security headers for all files
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-XSS-Protection "1; mode=block" always;
        }

        # WebAssembly specific configuration
        location ~* \.wasm$ {
            add_header Content-Type "application/wasm";
            add_header Cross-Origin-Embedder-Policy "require-corp";
            add_header Cross-Origin-Opener-Policy "same-origin";
            
            # Cache WebAssembly files for 1 hour (they change with builds)
            expires 1h;
            add_header Cache-Control "public";
        }
        
        # JavaScript files configuration
        location ~* \.(js)$ {
            add_header Content-Type "application/javascript";
            
            # Cache JS files for 1 hour (they change with builds)
            expires 1h;
            add_header Cache-Control "public";
        }

        # Static assets with long cache
        location ~* \.(css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }

        # HTML files - no cache to ensure updates are picked up
        location ~* \.html$ {
            expires -1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
        }

        # Health check endpoint
        location /health {
            access_log off;
            add_header Content-Type "application/json";
            return 200 '{"status":"healthy","service":"gofred-website","server":"nginx","ssl":"enabled"}';
        }

        # API endpoints or backend services (if needed in future)
        location /api/ {
            # Placeholder for future API integration
            return 404 '{"error":"API not implemented"}';
            add_header Content-Type "application/json";
        }

        # Deny access to server files and other sensitive files
        location ~ /(server\.go|server-prod\.go|\.git|\.env|\.htaccess|\.htpasswd)$ {
            deny all;
            return 404;
        }

        # Error pages
        error_page 404 /index.html;
        error_page 500 502 503 504 /index.html;
    }
}
